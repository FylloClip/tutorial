[
  {
    "objectID": "PCBs.html",
    "href": "PCBs.html",
    "title": "PCBs",
    "section": "",
    "text": "Here you can download the production files for the PCB needed to create the control unit (Arduino board) as well as the PCBs used as foliar sensors.\nThe files are provided in two different formats, gerber and EasyEDA. The gerber files can be used directly to place an order with a PCB manufacturer, whereas the EasyEDA files can be uploaded to the EasyEDA PCB design software where they can be edited and modified before placing an order.\n\nArduino board\n\n\n\nArduino board PCB\n\n\nGerber format\nEasyEDA format\n\n\nFylloClip sensors\nWhen ordering the foliar sensors, please make sure to select a PCB thickness of 1 mm. If the thickness is more than 1 mm, the sensor will be too stiff an difficult to be placed on a leaf. I have always chosen the white colour, but probably it does not make much of a difference if you choose another colour.\nlarger size:\n\n\n\nfoliar sensor, larger size\n\n\nGerber format\nEasyEDA format\nsmaller size:\n\n\n\nfoliar sensor, smaller size\n\n\nGerber format\nEasyEDA format",
    "crumbs": [
      "Home",
      "***HARDWARE***",
      "PCBs"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FylloClip tutorial",
    "section": "",
    "text": "This tutorial is intended to provide all the information needed to build a fully functional FylloClip module capable of remote data transmission via the LoRaWAN network. It will guide you from ordering PCBs (printed circuit boards), purchasing electronic components, assembling and programming the system, to setting up remote data transmission."
  },
  {
    "objectID": "code for Arduino.html",
    "href": "code for Arduino.html",
    "title": "uploading the code",
    "section": "",
    "text": "In order to become fully operational, a software program needs to be uploaded to the microcontroller board. Here you find this code (or ‘sketch’, as it is called in Arduino language) for downloading, as well as some additional instructions. The sketch includes all the functions and routines for the system to operate, i.e. to carry out measurements at defined time intervals and to send the data over the LoRa network to the cloud.\nThere are a few things to explain about this sketch. It is designed to run the FylloClip module in ABP (activation by personalisation) mode, which is one of two possibles modes of establishing a connection of a device to a LoRa network. This is not the officially recommended mode (which would be over the air activation, or OTAA), but it has the advantage of using a much more lightweight library (TinyLoRa) and that under some circumstances it uses less power.\nThe ABP mode of activating the device requires 3 unique identification keys to be inserted into the sketch before uploading it to the device. These are the network session key (NwkSkey), the application session key (AppSkey) and device address (DevAddr). You will obtain these codes when registering a new end device on the TTS console, after creating your own personal account there. It is important to copy and paste the keys in the hexadecimal format displaying an 0x in front of each number\nIn addition, for your own use, you can assign an ID-number from 0 - 99 to each device.\n\n\n\npart of the Arduino sketch with the ID- number in line 11 and the identification keys in lines 15, 18 and 21.\n\n\n\n\n\nTinyLora library\n\n\n\n\n\nselect the correct frequency band for your region by commenting/uncommenting the respective lines of code\n\n\nYou need also to install the Low-Power library from Rocket Scream, which allows the board to go into power-saving sleep mode between measurements.\nFor uploading the code you need a FTDI adapter. On the adapter select 3.3V power supply by positioning the jumper. This is important because the LoRa module on the board requires a supply voltage of 3.3 V and could be damaged if we set the voltage to 5 V.\n\n\n\nFTDI adapter\n\n\nIf you have installed male pin headers on your microcontroller board, you need to solder a female pin connector onto your FTDI adapter:\n\n\n\nFTDI adapter with modified connector pins\n\n\n\n\n\nFTDI adapter connected to the microprocessor board for programming\n\n\nBefore uploading the sketch make sure you have the correct board settings in the Arduino IDE: the selected board should be ‘Arduino Pro or Pro Mini’ with ‘ATmega328P(3.3V 8 Mhz)’ as processor. Make also sure you have selected the COM port to which the FTDI adapter is connected.\n\n\n\nBoard settings in the Arduino IDE\n\n\nDownload link for the Arduino code:\nArduino code\nOnce uploaded the sketch, you should be able to communicate with the board via the serial terminal of the IDE. the required settings for the serial monitor are ‘no line ending’ and ‘9600 baud’:\n\nAs soon as you start the serial terminal, the menu shown in the above screenshot appears. It will remain active only for a few seconds, after which the board goes into sleep mode. You can reactivate the menu by closing the serial terminal and opening it again. Then type immediately one of the letters of the options in the menu and hit ‘enter’.\ns - provides you an overview of actual settings and data\nr - resets the frame counter to zero.\nz - triggers the board to take sensor measurements and to send a data packet\na - allows you to set the desired time interval between successive measurements, with the following options: 01-05-10-15-20-30-60 minutes. Please enter always double digits, e.g. 05 instead of 5. A time interval of 10 minutes has proved to be appropriate.\nf - allows you to set the spreading factor for LoRa radio transmission, ranging from 07 to 12. Increasing values mean a longer distance of data transmission, but also at a higher energy and time consumption. So better start with 07 and increase only if necessary.",
    "crumbs": [
      "Home",
      "***SOFTWARE***",
      "uploading the code"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "assembly_instructions.html",
    "href": "assembly_instructions.html",
    "title": "assembly instructions",
    "section": "",
    "text": "Microcontroller board\nThe starting point is the empty PCB.\n \nAdding the LoRa module is the most tricky part, therefore solder it as the first component onto the empty PCB, so that you will not be hindered by the presence of other components​.\nHere a video showing how to solder the LoRa module onto the main PCB: solder RFM95\nNow continue with the remaining components, it doesn’t matter in which order, but it will be easier to add the 10K resistor before adding the socket for the Atmega328.\n  \nNow most of the components have been added… before inserting the Atmega328 chip into the socket, you need to burn the bootloader for the Pro Mini Arduino (8Mhz, 3.3V) onto it.​\nIf you want to monitor the battery voltage, solder a bridge between the two tiny solder plates marked with ‘batt_mon’ (yellow circle in the above pic), this will create a link between battery VCC and an analog pin of the micrcontroller.\nInstead of the male pin header (on the left) you can add a female header, depending on the type of FTDI adapter you will use for programming.​\nThe antenna (top right) is a piece of wire of 8.6 cm length.​\nFylloClip sensor\n \nHere you see the top and bottom side of a FylloClip sensor. The only component which needs to be added is the SFH203P photodiode acting as light sensor​.\n \nThe photodiode has a polarity, so you need to pay attention to its correct placement. In order to place it correctly, make sure that the flat edge of the photodiode coincides with the outline of the photodiode printed on the sensor PCB.\nOn the bottom side of the sensor PCB you see four small solder pads, marked with ‘c’, ‘c’, ‘-’ and ‘+’. Onto these pads you have to solder the end of the cables, which will connect the sensor to the microcontroller board. Connect the cables so that they point towards the centre of the sensor plate (see images below), this will allow you later to attach the sensors to the leaf with the cables not protruding from the side of the leaf running straight under the leaf towards the petiole where they can be fixed to the leaf (see paragraph ‘attaching the sensor to the leaf’).\nTry to use very thin and lightweight cables of about 1mm outer diameter. At the end put some nail polish on the soldered contacts, around the base of the photodiode and on both sides of the vias (tiny holes where copper traces pass from one side of the PCB to the other).\n \nThe red arrows indicate the places where to apply nail polish as a protective coating to prevent moisture from getting on the circuit.\nOnce you have soldered the cables to the foliar sensor and applied the polish, you can further fix the cables by adding a small cable tie passing through the two small holes on the sensor.\n\nWiring of the sensors to the micrcontroller board:\n\nWiring of the battery:\n\nThe final result:",
    "crumbs": [
      "Home",
      "***ASSEMBLY***",
      "assembly instructions"
    ]
  },
  {
    "objectID": "burning_bootloader.html",
    "href": "burning_bootloader.html",
    "title": "burning the bootloader",
    "section": "",
    "text": "The bootloader is a small program which need to be present on a microcontroller chip to be used in the Arduino environment. The bootloader enables the chip to receive code via the USB connection (using the Arduino IDE).\nIf you buy an ATmega chip from a supplier of electronic components, most likely it will come without the bootloader. Here you find the instructions on how to upload (‘burn’) a bootloader with the settings required for our particular purpose on a ATmega328P chip.\nThere are various possible ways to burn a bootloader, the easiest approach is to use another Arduino as the programming device for the new chip. For more details, see https://docs.arduino.cc/built-in-examples/arduino-isp/ArduinoISP/\n\nThe above picture explains the setup with two Arduino Uno boards, one is used as programmer, the other as target, which is to say as the board which holds the virgin ATmega chip which needs to get the bootloader. The programmer board will be connected to the PC via the USB cable, the target board will only be connected to the programmer board by 6 jumper wires as shown in the picture.\nAs the first step, the sketch ‘ArduinoISP’ needs to be uploaded onto the ‘programmer’ Arduino board.\n\nFor this step, the selected type of board in the Arduino IDE must be ‘Arduino UNO’\n\nAfter uploading this sketch onto the programmer board, change the selection to ‘Arduino Pro or Pro Mini’ :\n\nIn addition, select the option ‘ATmega328 (3.3V 8MHz)’ under Tools&gt;Processor\n\nNext, select ‘Arduino as ISP’ as the type of programmer:\n\nWith these settings, we can now activate the command to burn the bootloader onto the target chip:\n\nIf nothing goes wrong, now the bootloader should be transferred onto the target chip. With this setup, however, this process frequently fails due to the not perfectly stable connections with the jumper wires.\nIn order to avoid such problems, you can assemble a special programming board:\nThe design for this PCB can be downloaded here. In addition you need two 28-pin sockets, two 16 MHz crystals, four 22pF capacitors and a 6-pin header pin. The process of burning a bootloader will be exactly the same as described above. Of course you will need a ATmega328 chip with Arduino Uno bootloader already present to start with.",
    "crumbs": [
      "Home",
      "***HARDWARE***",
      "burning the bootloader"
    ]
  },
  {
    "objectID": "device_registration.html",
    "href": "device_registration.html",
    "title": "device registration on TTN",
    "section": "",
    "text": "Each device needs to be registered on the ‘The Things Network’ platform (TTN) for becoming fully operational.\nFirst, create a free account on The Things Network: https://www.thethingsnetwork.org/get-started\n\nOnce you have created your account, you need to create a so called ‘application’, which can be considered as a collection of end devices to be handled in a similar manner, concerning structure and transmission of their data.\n\n\nNext, you can start with the registration of end devices (each FylloClip module would be a single new end device)\n\nFollow the settings in the subsequent screenshots (if you’re located outside of Europe select the frequency plan applicable to your region).\n\nnext, select ABP and generate the DevEUI and the various keys:\n\nAfter registration we have to edit the newly created device to add a few further and to copy the keys we need to insert into the Arduino sketch\n\nScroll down and expand the Network layer settings\n\nScroll down and open the advanced MAC settings\n\nClick 9 times on the ‘add frequency’ button to add 9 empty fields\n\nIn those fields insert the following frequencies, this example reports the frequencies used for Europe (868 MHz frequency band), which are 868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000, 867900000, 868800000. Add the end save the changes.\n\nNow we retrieve the keys to be inserted into the Arduino sketch. Return to ‘Device overview’\n\nMake NwkSKey and AppSKey visible\n\nMove the cursor to the right side of the key fields to activate the formatting options, the change the format as follows. At the end copy each key using the copy function and insert them in the respective positions of the Arduino sketch.\n\n\n\nYou can also specify a unique ID number for your device (line 12 of the code), which may be helpful for later data handling. At this point the sketch id ready for the upload onto your device.",
    "crumbs": [
      "Home",
      "***SOFTWARE***",
      "device registration on TTN"
    ]
  },
  {
    "objectID": "list of components.html",
    "href": "list of components.html",
    "title": "electronic components",
    "section": "",
    "text": "The circuit board is relatively simple and consists of a microcontroller chip, a LoRa radio module and a few additional components.\nThe main parts of the system:\n \nATmega328P-PU with 8 Mhz crystal and 2 capacitors (22pF). The ATmega328P chip needs to have the bootloader for the Arduino board version ‘Pro or Pro Mini’ with the processor selection ‘ATmega328P (3.3V, 8 MHz)’ burned onto it. More details about burning the bootloader here.\n \nRFM95w LoRa module\n \nVoltage regulator (boost DC-DC converter)\n\na few resistors, connectors, capacitors,…\n\nBattery holder for 2 AA batteries\nHere a detailed list of all the required electronic components with links to a possible supplyer:\n\n\n\ncomponent​\nlink​\n\n\nphotodiode​\nhttps://www.reichelt.com​\n\n\nmicrocontroller atmega328 with bootloader for Arduino Pro Mini 3.3V​\nhttps://www.reichelt.com (you need to burn the bootloader onto the chip by yourself)​\n\n\nbattery holder​\nhttps://www.reichelt.com​\n\n\nCrystal 8 Mhz​\nhttps://www.reichelt.com​\n\n\nLoRa mosule RFM95w​\nhttps://www.soselectronic.com​\n\n\nSocket for microcontroller​\nhttps://www.reichelt.com​\n\n\nMale header pins ​\nhttps://www.reichelt.com​\n\n\nFemale header pins​\nhttps://www.reichelt.com (only in case you want to use female headers for the serial port)​\n\n\nResistor 4.7K​\nhttps://www.reichelt.com​\n\n\nResistor 10K​\nhttps://www.reichelt.com​\n\n\nCapacitor 100nF​\nhttps://www.reichelt.com​\n\n\nCapacitor 22pF​\nhttps://www.reichelt.com​\n\n\nconnector cable\nhttps://www.reichelt.com\n\n\nStep-up voltage regulator​\nhttps://www.aliexpress.com​",
    "crumbs": [
      "Home",
      "***HARDWARE***",
      "electronic components"
    ]
  }
]